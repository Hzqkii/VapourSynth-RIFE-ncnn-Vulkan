name: Release
on:
  push:
    tags:
      - "*"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      APPNAME: ${{ steps.get_appname.outputs.APPNAME }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get app name
        id: get_appname
        run: echo ::set-output name=APPNAME::${{ github.event.repository.name }}
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  create-release:
    needs:
      - setup
    name: Create Relase
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: true
          prerelease: false

  Ubuntu:
    needs: [setup, create-release]
    runs-on: ubuntu-22.04
    env:
      CC: gcc-12
      CXX: g++-12

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install GCC 12
      run: |
        sudo apt-get update
        sudo apt-get install g++-12
    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax

    - name: Install meson
      run: |
        python -m pip install --upgrade pip
        pip install meson
    - name: Install ninja
      run: sudo apt-get install ninja-build

    - name: Install zimg
      run: sudo apt-get install libzimg-dev

    - name: Install VapourSynth
      run: |
        git clone https://github.com/vapoursynth/vapoursynth --depth 1
        pushd vapoursynth
        ./autogen.sh
        ./configure --disable-static --disable-x86-asm --disable-vsscript --disable-vspipe --disable-python-module
        make -j2
        sudo make install -j2
        popd
        rm -rf vapoursynth
    - name: Install glslang
      run: sudo apt-get install glslang-dev

    - name: Install libvulkan
      run: sudo apt-get install libvulkan-dev

    - name: Install ncnn
      run: |
        git clone https://github.com/Tencent/ncnn --depth 1
        pushd ncnn
        cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr/local -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TOOLS=OFF -DNCNN_SHARED_LIB=ON -DNCNN_SYSTEM_GLSLANG=ON -DNCNN_VULKAN=ON -DGLSLANG_TARGET_DIR=/usr/lib/x86_64-linux-gnu/cmake -G Ninja
        ninja -C build
        sudo ninja -C build install
        popd
        rm -rf ncnn
    - name: Build
      run: |
        meson build -Duse_system_ncnn=true
        ninja -C build
    - name: Upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/librife.so
        asset_name: librife.so
        asset_content_type: application/octet-stream

  macOS:
      needs: [setup, create-release]
      runs-on: macos-latest

      env:
        CC: /usr/local/opt/llvm/bin/clang
        CXX: /usr/local/opt/llvm/bin/clang++

      steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install automake
        run: |
          brew update
          brew install automake
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax

      - name: Install meson
        run: |
          python -m pip install --upgrade pip
          pip install meson
      - name: Install ninja
        run: brew install ninja

      - name: Install zimg
        run: brew install zimg

      - name: Install VapourSynth
        run: |
          git clone https://github.com/vapoursynth/vapoursynth --depth 1
          pushd vapoursynth
          ./autogen.sh
          ./configure --disable-static --disable-x86-asm --disable-vsscript --disable-vspipe --disable-python-module
          make -j3
          sudo make install -j3
          popd
          rm -rf vapoursynth
      - name: Cache Vulkan SDK
        id: cache-vulkansdk
        uses: actions/cache@v3
        with:
          path: vulkansdk-macos-1.2.170.0
          key: vulkansdk-macos-1.2.170.0

      - name: Install Vulkan SDK
        if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.2.170.0/mac/vulkansdk-macos-1.2.170.0.dmg
          hdiutil attach vulkansdk-macos-1.2.170.0.dmg
          cp -r /Volumes/vulkansdk-macos-1.2.170.0 .
          rm -rf vulkansdk-macos-1.2.170.0/Applications
          find vulkansdk-macos-1.2.170.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
          hdiutil detach /Volumes/vulkansdk-macos-1.2.170.0
      - name: Set VULKAN_SDK
        run: echo "VULKAN_SDK=$GITHUB_WORKSPACE/vulkansdk-macos-1.2.170.0/macOS" >> $GITHUB_ENV

      - name: Install ncnn
        run: brew install ncnn

      - name: Build
        run: |
          meson build -Dcpp_args=-I$VULKAN_SDK/include -Dcpp_link_args=-L/usr/local/lib -Duse_system_ncnn=true
          ninja -C build
      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/librife.dylib
          asset_name: librife.dylib
          asset_content_type: application/octet-stream
